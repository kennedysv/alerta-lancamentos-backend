import nodemailer from 'nodemailer';
import 'dotenv/config';

const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 465,
    secure: true,
    auth: {
        user: process.env.MAIL_USER,
        pass: process.env.MAIL_PASS,
    },
});

// Fun√ß√£o para RECUPERA√á√ÉO DE SENHA
async function enviarEmailRecuperacao(destinatario, token) {
  const linkRecuperacao = `http://localhost:5173/redefinir-senha?token=${token}`;
  const msg = {
    to: destinatario,
    from: `"Alerta de Lan√ßamentos" <${process.env.MAIL_USER}>`,
    subject: "Recupera√ß√£o de Senha - Alerta de Lan√ßamentos",
    html: `<h1>Recupera√ß√£o de Senha</h1><p>Voc√™ solicitou a redefini√ß√£o da sua senha. Clique no link abaixo para criar uma nova senha:</p><a href="${linkRecuperacao}" target="_blank">Redefinir Minha Senha</a><p>Este link expirar√° em 15 minutos.</p><p>Se voc√™ n√£o solicitou isso, por favor, ignore este e-mail.</p>`,
  };
  try {
    await transporter.sendMail(msg);
    console.log(`E-mail de recupera√ß√£o enviado para ${destinatario}`);
  } catch (error) {
    console.error("Erro ao enviar e-mail de recupera√ß√£o via Gmail:", error);
    throw new Error("N√£o foi poss√≠vel enviar o e-mail de recupera√ß√£o.");
  }
}

// Fun√ß√£o para notificar sobre S√âRIES
async function enviarEmailNotificacao(
  destinatario,
  tituloConteudo,
  detalhesEpisodio
) {
  console.log(`Preparando e-mail de epis√≥dio para ${destinatario}...`);
  try {
    await transporter.sendMail({
      from: `"Alerta de Lan√ßamentos" <${process.env.MAIL_USER}>`,
      to: destinatario,
      subject: `üéâ Novo epis√≥dio de ${tituloConteudo}!`,
      html: `<h1>Ol√°!</h1><p>Um novo epis√≥dio de <strong>${tituloConteudo}</strong> acaba de ser lan√ßado!</p><h3>Detalhes do Epis√≥dio:</h3><ul><li><strong>T√≠tulo:</strong> ${detalhesEpisodio.name}</li><li><strong>Temporada:</strong> ${detalhesEpisodio.season_number}</li><li><strong>Epis√≥dio:</strong> ${detalhesEpisodio.episode_number}</li><li><strong>Data de Lan√ßamento:</strong> ${detalhesEpisodio.air_date}</li></ul><p>Corra para assistir!</p>`,
    });
    console.log(`E-mail de epis√≥dio enviado para ${destinatario}!`);
  } catch (error) {
    console.error(
      `Erro ao enviar e-mail de epis√≥dio para ${destinatario}:`,
      error
    );
  }
}

// Fun√ß√£o para notificar sobre FILMES
async function enviarEmailNotificacaoFilme(
  destinatario,
  tituloConteudo,
  detalhesFilme
) {
  console.log(
    `Preparando e-mail de lan√ßamento de filme para ${destinatario}...`
  );
  try {
    await transporter.sendMail({
      from: `"Alerta de Lan√ßamentos" <${process.env.MAIL_USER}>`,
      to: destinatario,
      subject: `üé¨ O filme ${tituloConteudo} j√° foi lan√ßado!`,
      html: `<h1>Ol√°!</h1><p>O filme <strong>${tituloConteudo}</strong> que voc√™ est√° seguindo j√° est√° dispon√≠vel!</p><h3>Detalhes do Filme:</h3><ul><li><strong>T√≠tulo Original:</strong> ${
        detalhesFilme.title
      }</li><li><strong>Data de Lan√ßamento:</strong> ${new Date(
        detalhesFilme.release_date
      ).toLocaleDateString("pt-BR")}</li><li><strong>Sinopse:</strong> "<em>${
        detalhesFilme.overview
      }</em>"</li></ul><p>Corra para assistir!</p>`,
    });
    console.log(`E-mail de filme enviado para ${destinatario}!`);
  } catch (error) {
    console.error(
      `Erro ao enviar e-mail de filme para ${destinatario}:`,
      error
    );
  }
}

// ‚úÖ A LINHA MAIS IMPORTANTE: Garante que TODAS as fun√ß√µes sejam exportadas.
export default {
  enviarEmailRecuperacao,
  enviarEmailNotificacao,
  enviarEmailNotificacaoFilme,
};
